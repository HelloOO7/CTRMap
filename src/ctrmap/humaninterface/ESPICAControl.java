package ctrmap.humaninterface;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ESPICAControl extends javax.swing.JFrame {

	/**
	 * Creates new form ESPICAControl
	 */
	private Runnable onSuccess;
	private boolean isSuccess = false;

	public ESPICAControl() {
		initComponents();
		btnClose.setEnabled(false);
	}

	public ESPICAControl(Runnable doOnSuccess) {
		this();
		this.onSuccess = doOnSuccess;
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {

			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outputScrollPane = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        status = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ESPICA");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(200, 200));

        output.setColumns(20);
        output.setRows(5);
        outputScrollPane.setViewportView(output);

        status.setText("ESPICA");

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnClose))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(status)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(status)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
		dispose();
		if (onSuccess != null && isSuccess) {
			onSuccess.run();
		}
    }//GEN-LAST:event_btnCloseActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ESPICAControl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		//</editor-fold>
		ESPICAControl test = new ESPICAControl();
		test.setVisible(true);
		test.runProcess("D:\\Work\\SPICA-master\\ESPICA\\bin\\Debug\\ESPICA.exe", new ESPICAProcess(ESPICAFunctionMode.MODEL_CONVERT,
				new File("D:\\Work\\SPICA-master\\ESPICA\\bin\\Debug\\pokecen_final.obj"),
				new File("D:\\Work\\SPICA-master\\ESPICA\\bin\\Debug\\Dummy.bch"),
				new File("D:\\Work\\SPICA-master\\ESPICA\\bin\\Debug\\out.bch"),
				new String[]{"-notexture"}));
	}

	public void runProcess(String ESPICAPath, ESPICAProcess proc) {
		output.setText(null);
		status.setText("Initializing");
		if (System.getProperty("os.name").startsWith("Windows")) {
			if (new File(ESPICAPath).canExecute()) {
				Thread ESPICAThread = new Thread() {
					public void run() {
						try {
							status.setText("ESPICA running");
							Process process = Runtime.getRuntime().exec(ESPICAPath + proc.getArguments());
							InputStream is = process.getInputStream();
							InputStreamReader isr = new InputStreamReader(is);
							BufferedReader br = new BufferedReader(isr);
							String line;

							while ((line = br.readLine()) != null) {
								output.append(line + "\n");
							}
							status.setText("ESPICA has finished");
							btnClose.setEnabled(true);
							isSuccess = true;
						} catch (IOException ex) {
							Logger.getLogger(ESPICAControl.class.getName()).log(Level.SEVERE, null, ex);
						}
					}
				};
				ESPICAThread.start();
			} else {
				status.setText("Failed - ESPICA path not set or invalid.");
				btnClose.setEnabled(true);
			}
		} else {
			status.setText("Failed - unsupported OS");
			btnClose.setEnabled(true);
		}
	}

	public static class ESPICAProcess {

		public ESPICAFunctionMode mode;
		public File input;
		public File donor;
		public File output;
		public String[] extra;

		public ESPICAProcess(ESPICAFunctionMode mode, File input, File donor, File output, String[] extra) {
			this.mode = mode;
			this.input = input;
			this.donor = donor;
			this.output = output;
			this.extra = extra;
		}

		public String getMode() {
			switch (mode) {
				case MODEL_CONVERT:
					return "objconvert";
				case TEXTURE_MERGE:
					return "texturemerge";
				default:
					return "";
			}
		}

		public String getArguments() {
			StringBuilder argBuilder = new StringBuilder();
			argBuilder.append(" ");
			argBuilder.append(getMode());
			argBuilder.append(" -i ");
			argBuilder.append(input);
			argBuilder.append(" -d ");
			argBuilder.append(donor);
			if (output != null) {
				argBuilder.append(" -o ");
				argBuilder.append(output);
			}
			for (String e : extra) {
				argBuilder.append(" ");
				argBuilder.append(e);
			}
			return argBuilder.toString();
		}
	}

	public enum ESPICAFunctionMode {
		TEXTURE_MERGE,
		MODEL_CONVERT
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JTextArea output;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
}
