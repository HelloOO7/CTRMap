package ctrmap.humaninterface;

import ctrmap.resources.ResourceAccess;
import static ctrmap.CtrmapMainframe.*;
import ctrmap.Workspace;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 */
public class ExtrasPanel extends javax.swing.JPanel {

	/**
	 * Creates new form ExtrasPanel
	 */
	public ExtrasPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        freecam = new javax.swing.JButton();
        freecamReg = new javax.swing.JButton();
        freecamTitleLabel = new javax.swing.JLabel();

        freecam.setText("Inject dummy camera collisions");
        freecam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freecamActionPerformed(evt);
            }
        });

        freecamReg.setText("Set camera flags + Zone failsafes");
        freecamReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freecamRegActionPerformed(evt);
            }
        });

        freecamTitleLabel.setText("Free camera mod (DANGER)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(freecamTitleLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(freecam)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(freecamReg)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(freecamTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freecam)
                    .addComponent(freecamReg))
                .addContainerGap(246, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void freecamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freecamActionPerformed
        if (mZonePnl.zones != null){
            byte[] ad7 = ResourceAccess.getByteArray("DummyLumioseCollision.bin");
            for (int i = 0; i < mZonePnl.zones.length; i++){
                mZonePnl.zones[i].header.fetchArchives();
                mZonePnl.zones[i].header.areadata.storeFile(7, ad7);
                mZonePnl.zones[i].header.freeArchives();
            }
        }
    }//GEN-LAST:event_freecamActionPerformed

    private void freecamRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freecamRegActionPerformed
        //ORAS has longer AD file 536 (44 byte entry instead of 36) so we ban it idk if it even works, will try sometime
        //well apparently ORAS doesn't have Lumiose Camera programmed in
        /*if (mWorkspace.game == Workspace.GameType.ORAS){
            JOptionPane.showMessageDialog(frame, "ORAS is not supported", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }*/

        if (mZonePnl.zones != null){
            for (int i = 0; i < mZonePnl.zones.length; i++){
                mZonePnl.zones[i].header.enableRollerSkates = true;
                mZonePnl.zones[i].header.enableEscapeRope = true;
                mZonePnl.zones[i].header.enableFlyFrom = true;
                mZonePnl.zones[i].header.enableRunning = true;
                if (mWorkspace.game == Workspace.GameType.ORAS){
                    mZonePnl.zones[i].header.enableCycling = false; //Cycling softlocks the game even on emulators
                }
                mZonePnl.zones[i].store(false);
            }
        }

        File f170 = mWorkspace.game == Workspace.GameType.XY ? mWorkspace.getWorkspaceFile(Workspace.ArchiveType.AREA_DATA, 170)
        : mWorkspace.getWorkspaceFile(Workspace.ArchiveType.AREA_DATA, 228);
        try {
            RandomAccessFile raf = new RandomAccessFile(f170, "rw");
            int skip = mWorkspace.game == Workspace.GameType.XY ? 0x14 : 0x1c;
            while (raf.getFilePointer() + 0xf < raf.length()){
                raf.skipBytes(0xf);
                raf.write(1);
                raf.skipBytes(skip);
            }
            raf.close();
            mWorkspace.addPersist(f170);
        } catch (IOException ex) {
            Logger.getLogger(ZoneLoadingPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_freecamRegActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton freecam;
    private javax.swing.JButton freecamReg;
    private javax.swing.JLabel freecamTitleLabel;
    // End of variables declaration//GEN-END:variables
}
