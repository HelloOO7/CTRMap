package ctrmap;

import java.awt.Dimension;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultFormatterFactory;

/**
 * GUI tool to write METS tilesets for use with the CTRMap 2D tile editor.
 */
public class TileDBWriter extends javax.swing.JFrame {

	/**
	 * Creates new form TileDBWriter
	 */
	private static TileDBWriter mSingleton;
	private File f;
	private List<Tile> tiles = new ArrayList<>();
	private int curTile = 0;

	public TileDBWriter() {
		initComponents();
		mSingleton = this;
		mSingleton.setLocationByPlatform(true);
		mSingleton.setResizable(false);
		color.getSelectionModel().addChangeListener((ChangeEvent e) -> {
			tiles.get(curTile).color = color.getColor().getRGB();
		});
		tiles.add(new Tile(0, "", 0xFF0000, 0, 0));
		curTile = 0;
		showTile();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cat1BtnGroup = new javax.swing.ButtonGroup();
        cat2BtnGroup = new javax.swing.ButtonGroup();
        name = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        binary = new javax.swing.JFormattedTextField();
        binaryLabel = new javax.swing.JLabel();
        normal = new javax.swing.JRadioButton();
        water = new javax.swing.JRadioButton();
        action = new javax.swing.JRadioButton();
        cat2Panel = new javax.swing.JPanel();
        cat2b4 = new javax.swing.JRadioButton();
        cat2b2 = new javax.swing.JRadioButton();
        cat2b1 = new javax.swing.JRadioButton();
        cat2b3 = new javax.swing.JRadioButton();
        btnPrevTile = new javax.swing.JButton();
        btnNextTile = new javax.swing.JButton();
        color = new javax.swing.JColorChooser();
        btnRemoveTile = new javax.swing.JButton();
        menubar = new javax.swing.JMenuBar();
        filemenu = new javax.swing.JMenu();
        newfile = new javax.swing.JMenuItem();
        openfile = new javax.swing.JMenuItem();
        savefile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        nameLabel.setText("Name");

        binary.setFormatterFactory(new HexFormatterFactory());
        binary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryActionPerformed(evt);
            }
        });

        binaryLabel.setText("Binary");

        cat1BtnGroup.add(normal);
        normal.setText("Normal");
        normal.setActionCommand("normal");
        normal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        normal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalActionPerformed(evt);
            }
        });

        cat1BtnGroup.add(water);
        water.setText("Water");
        water.setActionCommand("water");
        water.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        water.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waterActionPerformed(evt);
            }
        });

        cat1BtnGroup.add(action);
        action.setText("Action");
        action.setActionCommand("action");
        action.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        action.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionActionPerformed(evt);
            }
        });

        cat2Panel.setAlignmentX(0.0F);
        cat2Panel.setPreferredSize(new java.awt.Dimension(270, 37));

        cat2BtnGroup.add(cat2b4);
        cat2b4.setText("<N/A>");
        cat2b4.setActionCommand("cat2b4");
        cat2b4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cat2b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cat2b4ActionPerformed(evt);
            }
        });

        cat2BtnGroup.add(cat2b2);
        cat2b2.setText("<N/A>");
        cat2b2.setActionCommand("cat2b2");
        cat2b2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cat2b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cat2b2ActionPerformed(evt);
            }
        });

        cat2BtnGroup.add(cat2b1);
        cat2b1.setText("<N/A>");
        cat2b1.setActionCommand("cat2b1");
        cat2b1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cat2b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cat2b1ActionPerformed(evt);
            }
        });

        cat2BtnGroup.add(cat2b3);
        cat2b3.setText("<N/A>");
        cat2b3.setActionCommand("cat2b3");
        cat2b3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cat2b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cat2b3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cat2PanelLayout = new javax.swing.GroupLayout(cat2Panel);
        cat2Panel.setLayout(cat2PanelLayout);
        cat2PanelLayout.setHorizontalGroup(
            cat2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cat2PanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(cat2b1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cat2b2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cat2b3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cat2b4)
                .addContainerGap(72, Short.MAX_VALUE))
        );
        cat2PanelLayout.setVerticalGroup(
            cat2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cat2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cat2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cat2b1)
                    .addComponent(cat2b2)
                    .addComponent(cat2b3)
                    .addComponent(cat2b4))
                .addContainerGap())
        );

        btnPrevTile.setText("Previous tile");
        btnPrevTile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevTileActionPerformed(evt);
            }
        });

        btnNextTile.setText("Next tile");
        btnNextTile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextTileActionPerformed(evt);
            }
        });

        btnRemoveTile.setText("Remove tile");
        btnRemoveTile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTileActionPerformed(evt);
            }
        });

        filemenu.setText("File");

        newfile.setText("New");
        newfile.setActionCommand("newfile");
        newfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newfileActionPerformed(evt);
            }
        });
        filemenu.add(newfile);

        openfile.setText("Open");
        openfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openfileActionPerformed(evt);
            }
        });
        filemenu.add(openfile);

        savefile.setText("Save");
        savefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savefileActionPerformed(evt);
            }
        });
        filemenu.add(savefile);

        menubar.add(filemenu);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cat2Panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(normal)
                                .addGap(0, 0, 0)
                                .addComponent(water, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(action))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameLabel)
                                    .addComponent(binaryLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(binary)
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPrevTile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNextTile, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveTile, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(color, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(binary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(binaryLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(normal)
                    .addComponent(water)
                    .addComponent(action))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cat2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrevTile)
                    .addComponent(btnNextTile)
                    .addComponent(btnRemoveTile))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(color, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openfileActionPerformed
		JFileChooser jfc = new JFileChooser();
		jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		Action details = jfc.getActionMap().get("viewTypeDetails");
		details.actionPerformed(null);
		jfc.setDialogTitle("Open a tile database");
		jfc.setPreferredSize(new Dimension(jfc.getPreferredSize().width, jfc.getPreferredSize().height * 2));
		jfc.showOpenDialog(this);
		f = jfc.getSelectedFile();
		if (f == null) {
			return;
		}
		tiles.clear();
		try {
			DataInputStream dis = new DataInputStream(new FileInputStream(f));
			if (dis.available() > 0) {
				int magic = dis.readInt();
				if (magic != 0x4D455453){
					JOptionPane.showMessageDialog(null, "Tileset magic mismatch", "Parse error", JOptionPane.ERROR_MESSAGE);
					dis.close();
					return;
				}
				int length = dis.readInt();
				for (int i = 0; i < length; i++) {
					int strlen = dis.read();
					byte[] strbuf = new byte[strlen];
					dis.read(strbuf);
					String nameString = new String(strbuf, "UTF-8");
					int binaryInt = dis.readInt();
					int colorInt = dis.readInt();
					int cat1 = dis.read();
					int cat2 = dis.read();
					tiles.add(new Tile(binaryInt, nameString, colorInt, cat1, cat2));
					System.out.println("added " + i);
				}
			}
			dis.close();
		} catch (IOException ex) {
			Logger.getLogger(TileDBWriter.class.getName()).log(Level.SEVERE, null, ex);
		}
		curTile = 0;
		showTile();
    }//GEN-LAST:event_openfileActionPerformed

	private void showTile() {
		if (tiles.size() <= curTile) {
			tiles.add(new Tile(0, "", 0xFF0000, 0, 0));
		}
		Tile tile = tiles.get(curTile);
		name.setText(tile.name);
		binary.setValue(tile.binary);
		color.setColor(tile.color);
		switch (tile.cat1) {
			case 0:
				normal.setSelected(true);
				break;
			case 1:
				water.setSelected(true);
				break;
			case 2:
				action.setSelected(true);
				break;
		}
		setCat2Texts();
		switch (tile.cat2) {
			case 0:
				cat2b1.setSelected(true);
				break;
			case 1:
				cat2b2.setSelected(true);
				break;
			case 2:
				cat2b3.setSelected(true);
				break;
			case 3:
				cat2b4.setSelected(true);
				break;
		}
	}

	private static class HexFormatterFactory extends DefaultFormatterFactory {

		private static final long serialVersionUID = 6795960205384589732L;

		@Override
		public JFormattedTextField.AbstractFormatter getDefaultFormatter() {
			return new JFormattedTextField.AbstractFormatter() {
				private static final long serialVersionUID = 6795960205384589733L;

				@Override
				public Object stringToValue(String text) throws ParseException {
					try {
						return Integer.valueOf(text, 16);
					} catch (NumberFormatException nfe) {
						throw new ParseException(text, 0);
					}
				}

				@Override
				public String valueToString(Object value) throws ParseException {
					if (value != null) {
						return Integer.toHexString((Integer) value).toUpperCase();
					} else {
						return "";
					}
				}
			};
		}
	}

    private void normalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalActionPerformed
		setCat2Texts();
		tiles.get(curTile).cat1 = 0;
    }//GEN-LAST:event_normalActionPerformed

    private void waterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waterActionPerformed
		setCat2Texts();
		tiles.get(curTile).cat1 = 1;
    }//GEN-LAST:event_waterActionPerformed

    private void actionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionActionPerformed
		setCat2Texts();
		tiles.get(curTile).cat1 = 2;
    }//GEN-LAST:event_actionActionPerformed

	private void setCat2Texts() {
		if (normal.isSelected()) {
			cat2b1.setText("Plain");
			cat2b2.setText("Encounters");
			cat2b3.setText("Puzzles");
			cat2b4.setText("Footprints");
			setCat2Enabled(true);
		} else if (water.isSelected()) {
			cat2b1.setText("Surf");
			cat2b2.setText("Waterfall");
			cat2b3.setText("Edge");
			cat2b4.setText("Edge2");
			setCat2Enabled(true);
		} else if (action.isSelected()) {
			cat2b1.setText("Trigger");
			cat2b2.setText("HM/Ride");
			cat2b3.setText("Sittables");
			cat2b4.setText("Rails");
			setCat2Enabled(true);
		} else {
			setCat2Enabled(false);
			cat2b1.setText("<N/A>");
			cat2b2.setText("<N/A>");
			cat2b3.setText("<N/A>");
			cat2b4.setText("<N/A>");
		}
	}

	private void setCat2Enabled(boolean b) {
		cat2b1.setEnabled(b);
		cat2b2.setEnabled(b);
		cat2b3.setEnabled(b);
		cat2b4.setEnabled(b);
	}

    private void newfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newfileActionPerformed
		JFileChooser jfc = new JFileChooser();
		jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		Action details = jfc.getActionMap().get("viewTypeDetails");
		details.actionPerformed(null);
		jfc.setPreferredSize(new Dimension(jfc.getPreferredSize().width, jfc.getPreferredSize().height * 2));
		jfc.setDialogTitle("Select the new file's location");
		jfc.showSaveDialog(this);
		f = jfc.getSelectedFile();
		if (f == null) {
			return;
		}
		tiles.clear();
		tiles.add(new Tile(0, "", 0xFF0000, 0, 0));
		curTile = 0;
		showTile();
		f = jfc.getSelectedFile();
    }//GEN-LAST:event_newfileActionPerformed

    private void btnPrevTileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevTileActionPerformed
		try {
			tiles.get(curTile).name = name.getDocument().getText(0, name.getDocument().getLength());
		} catch (BadLocationException ex) {
			Logger.getLogger(TileDBWriter.class.getName()).log(Level.SEVERE, null, ex);
		}
		tiles.get(curTile).binary = Integer.parseInt(getStringFromDocument(binary), 16);
		if (curTile > 0) {
			curTile--;
			showTile();
		}
    }//GEN-LAST:event_btnPrevTileActionPerformed

    private void btnNextTileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextTileActionPerformed
		try {
			tiles.get(curTile).name = name.getDocument().getText(0, name.getDocument().getLength());
		} catch (BadLocationException ex) {
			Logger.getLogger(TileDBWriter.class.getName()).log(Level.SEVERE, null, ex);
		}
		try {
			tiles.get(curTile).binary = Integer.parseInt(getStringFromDocument(binary), 16);
		} catch (NumberFormatException ex) {
			ex.printStackTrace();
		}
		curTile++;
		showTile();
    }//GEN-LAST:event_btnNextTileActionPerformed

	private String getStringFromDocument(JFormattedTextField docOwner) {
		try {
			String val = docOwner.getDocument().getText(0, docOwner.getDocument().getLength()).replace(',', '.');
			return val;
		} catch (BadLocationException ex) {
			return "";
		}
	}

    private void savefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savefileActionPerformed
		JFileChooser jfc = new JFileChooser();
		Action details = jfc.getActionMap().get("viewTypeDetails");
		details.actionPerformed(null);
		jfc.setPreferredSize(new Dimension(jfc.getPreferredSize().width, jfc.getPreferredSize().height * 2));
		jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		jfc.setDialogTitle("Save as");
		jfc.showSaveDialog(this);
		f = jfc.getSelectedFile();
		if (f == null) {
			return;
		}
		try {
			DataOutputStream dos = new DataOutputStream(new FileOutputStream(f));
			dos.writeInt(0x4D455453);
			dos.writeInt(tiles.size());
			for (int i = 0; i < tiles.size(); i++) {
				tiles.get(i).write(dos);
			}
			dos.close();
		} catch (IOException ex) {
			Logger.getLogger(TileDBWriter.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_savefileActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
		if (name.getText() != null) {
			tiles.get(curTile).name = name.getText();
		}
    }//GEN-LAST:event_nameActionPerformed

    private void binaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryActionPerformed
		if (binary.getValue() != null) {
			tiles.get(curTile).binary = (Integer) binary.getValue();
		}
    }//GEN-LAST:event_binaryActionPerformed

    private void cat2b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cat2b1ActionPerformed
		tiles.get(curTile).cat2 = 0;
    }//GEN-LAST:event_cat2b1ActionPerformed

    private void cat2b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cat2b2ActionPerformed
		tiles.get(curTile).cat2 = 1;
    }//GEN-LAST:event_cat2b2ActionPerformed

    private void cat2b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cat2b3ActionPerformed
		tiles.get(curTile).cat2 = 2;
    }//GEN-LAST:event_cat2b3ActionPerformed

    private void cat2b4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cat2b4ActionPerformed
		tiles.get(curTile).cat2 = 3;
    }//GEN-LAST:event_cat2b4ActionPerformed

    private void btnRemoveTileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTileActionPerformed
		tiles.remove(curTile);
		showTile();
    }//GEN-LAST:event_btnRemoveTileActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(TileDBWriter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(TileDBWriter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(TileDBWriter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(TileDBWriter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(() -> {
			mSingleton = new TileDBWriter();
			mSingleton.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			mSingleton.setVisible(true);
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton action;
    private javax.swing.JFormattedTextField binary;
    private javax.swing.JLabel binaryLabel;
    private javax.swing.JButton btnNextTile;
    private javax.swing.JButton btnPrevTile;
    private javax.swing.JButton btnRemoveTile;
    private javax.swing.ButtonGroup cat1BtnGroup;
    private javax.swing.ButtonGroup cat2BtnGroup;
    private javax.swing.JPanel cat2Panel;
    private javax.swing.JRadioButton cat2b1;
    private javax.swing.JRadioButton cat2b2;
    private javax.swing.JRadioButton cat2b3;
    private javax.swing.JRadioButton cat2b4;
    private javax.swing.JColorChooser color;
    private javax.swing.JMenu filemenu;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JTextField name;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JMenuItem newfile;
    private javax.swing.JRadioButton normal;
    private javax.swing.JMenuItem openfile;
    private javax.swing.JMenuItem savefile;
    private javax.swing.JRadioButton water;
    // End of variables declaration//GEN-END:variables
}

class Tile {

	public int binary;
	public String name;
	public int color;
	public int cat1;
	public int cat2;

	public Tile(int binary, String name, int color, int cat1, int cat2) {
		this.binary = binary;
		this.color = color;
		this.name = name;
		this.cat1 = cat1;
		this.cat2 = cat2;
	}

	public void write(DataOutputStream dos) {
		try {
			dos.writeByte(name.length());
			dos.write(name.getBytes("UTF-8"));
			dos.writeInt(binary);
			dos.writeInt(color);
			dos.write(cat1);
			dos.write(cat2);
		} catch (IOException ex) {
			Logger.getLogger(Tile.class.getName()).log(Level.SEVERE, null, ex);
		}
	}
}
